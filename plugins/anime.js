const { cmd } = require('../lib/command');
const { getBuffer, getThumbnailBuffer } = require('../lib/functions');
const cheerio = require('cheerio');
const axios = require('axios');
const config = require('../settings');

cmd({
    pattern: "slanimeclub",
    react: 'üé•',
    category: "movie",
    desc: "Download Sinhala Subbed Anime from slanimeclub.co",
    filename: __filename
},
async (conn, m, mek, { from, q, reply }) => {
    const lang = config.LANG === 'SI';

    try {
        if (!q) return reply(lang ? '*‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑É‡∑ô‡∑Ä‡∑ì‡∂∏‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± üñäÔ∏è*' : '*Please provide a search term üñäÔ∏è*');

        const searchUrl = `https://slanimeclub.co/?s=${encodeURIComponent(q)}`;
        const { data: searchHtml } = await axios.get(searchUrl);
        const $ = cheerio.load(searchHtml);

        const firstResult = $('.result-item').first();
        if (!firstResult || !firstResult.find('a').attr('href')) {
            return reply(lang ? '*‡∂á‡∂±‡∑ì‡∂∏‡∑ö ‡∂±‡∂∏‡∂ö‡∂ß ‡∂Ö‡∂±‡∑ñ‡∑Ä ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑í*' : '*No anime found with that name*');
        }

        const animePageUrl = firstResult.find('a').attr('href');
        const animeImage = firstResult.find('img').attr('src');
        const animeTitle = firstResult.find('.title').text().trim();

        const { data: animePageHtml } = await axios.get(animePageUrl);
        const $$ = cheerio.load(animePageHtml);

        const videoLink = $$('.mirror-button a[href$=".mp4"]').first().attr('href');
        if (!videoLink) return reply(lang ? '*üéûÔ∏è Video link ‡∂ë‡∂ö ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö*' : '*üéûÔ∏è Unable to find video link*');

        const caption = lang
            ? `üéûÔ∏è *‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä:* ${animeTitle}\n\n*‚è© MP4 ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∂∫‡∑Ä‡∂∏‡∑í‡∂±‡∑ä...*`
            : `üéûÔ∏è *Title:* ${animeTitle}\n\n*‚è© Sending MP4 video...*`;

        await conn.sendMessage(from, {
            image: { url: animeImage },
            caption
        }, { quoted: mek });

        await conn.sendMessage(from, {
            document: await getBuffer(videoLink),
            fileName: `${animeTitle}.mp4`,
            mimetype: 'video/mp4',
            caption: animeTitle,
            jpegThumbnail: await getThumbnailBuffer(config.LOGO)
        }, { quoted: mek });

        await conn.sendMessage(from, { react: { text: '‚úÖ', key: mek.key } });

    } catch (err) {
        console.error(err);
        reply(lang ? '*‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*' : '*An error occurred. Please try again.*');
    }
});
